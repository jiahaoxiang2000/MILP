from __future__ import print_function
import numpy as np
import time
from gurobipy import *
import gurobipy

def print_DDT(table):
    for row in range(len(table)):
        for col in range(len(table[row])):
            print(table[row][col], end='');
            if col == len(table[row]) - 1:
                print("\n");


def print_Diff(table):
    for row in range(len(table)):
        for col in range(len(table[row])):
            print(table[row][col], end='');
            if col == len(table[row]) - 1:
                print("");


def print_Diff_sage(table):
    for row in range(len(table)):
        print("[", end='');
        for col in range(len(table[row])):
            if col == len(table[row]) - 1:
                print(table[row][col], end=' ');
                print("],", end='');
            else:
                print(table[row][col], end=' , ');


s_box = ((0x0, 0xf, 0xe, 0x5, 0xd, 0x3, 0x6, 0xc, 0xb, 0x9, 0xa, 0x8, 0x7, 0x4, 0x2, 0x1),);

DDT_SIZE = (len(s_box), len(s_box[0]))
DDT = np.zeros((DDT_SIZE[1], DDT_SIZE[1]))
DDT = DDT.astype(int)
sbox_val = []

for p2 in range(DDT_SIZE[1]):
    row = p2 >> 4
    col = p2 & 15
    sbox_val.append(s_box[row][col]);

for p1 in range(DDT_SIZE[1]):
    for p2 in range(DDT_SIZE[1]):
        XOR_IN = np.bitwise_xor(p1, p2);
        XOR_OUT = np.bitwise_xor(sbox_val[p1], sbox_val[p2]);
        DDT[XOR_IN][XOR_OUT] += 1

diff_arr = []
impossible_diff_arr = []
for row in range(len(DDT)):
    row_hex = bin(row)[2:].zfill(4);
    row_arr = [int(i) for i in row_hex];
    for col in range(len(DDT[row])):
        col_hex = bin(col)[2:].zfill(4);
        col_arr = [int(i) for i in col_hex];
        if (DDT[row][col] != 0):
            diff_arr += [row_arr + col_arr];
        else:
            impossible_diff_arr += [row_arr + col_arr];
print(diff_arr)
ineq_list = [[1, -1, 0, 0, 0, 0, 0, 0, 0] ,
[1, 0, -1, 0, 0, 0, 0, 0, 0] ,
[1, 0, 0, -1, 0, 0, 0, 0, 0] ,
[1, 0, 0, 0, -1, 0, 0, 0, 0] ,
[1, 0, 0, 0, 0, -1, 0, 0, 0] ,
[4, -1, -1, -1, -1, 0, -1, 0, 1] ,
[1, 0, 0, 0, 0, 0, -1, 0, 0] ,
[1, 0, 0, 0, 0, 0, 0, 0, -1] ,
[4, 0, 1, -1, -1, -1, -1, 0, -1] ,
[4, -1, -1, 0, -1, 0, 1, -1, -1] ,
[1, 0, 0, 0, 0, 0, 0, -1, 0] ,
[4, 0, -1, 0, 1, -1, -1, -1, -1] ,
[0, 0, 0, 0, 0, 0, 0, 1, 0] ,
[5, 0, 2, -1, -1, -2, -1, 1, -2] ,
[2, 0, -1, 1, -1, 0, 0, 1, -1] ,
[2, -1, -1, 1, 0, 0, 0, 1, -1] ,
[2, 0, 0, 1, -1, -1, -1, 1, 0] ,
[2, 0, 0, 1, -1, 0, -1, 1, -1] ,
[4, 0, 1, 1, -2, -1, -2, 2, -1] ,
[2, 0, 1, -1, 0, -1, 0, 1, -1] ,
[0, 1, -1, 3, -2, 2, 2, 4, -1] ,
[1, -1, -1, 2, 0, 1, 1, 1, -1] ,
[3, -1, -1, -1, 1, -1, 1, 0, 1] ,
[1, 1, -1, 2, -2, 1, 1, 3, -1] ,
[0, 0, -1, 1, 0, 1, 1, 1, 0] ,
[4, -1, -2, 2, -1, 0, 1, 1, -2] ,
[0, 1, -1, 1, -1, 1, 1, 2, 0] ,
[2, 1, -1, -1, -1, 1, 0, 0, 0] ,
[0, 0, 0, 0, 0, 1, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 1, 0, 0] ,
[2, 1, -1, 0, 0, 1, -1, 0, -1] ,
[6, -2, -2, -1, -1, -1, -1, 1, 2] ,
[3, -1, -1, -2, 0, 1, -1, 1, 2] ,
[4, 3, -3, 1, -1, 3, -3, 1, -1] ,
[0, 1, -1, 0, 0, 1, 0, 1, 0] ,
[2, 1, 0, 0, 0, 1, -1, -1, -1] ,
[2, 1, -1, 2, -2, 1, 0, 3, -2] ,
[4, 1, -2, -1, -2, 2, -1, 0, 1] ,
[5, -2, -1, 1, -2, 0, 2, -1, -1] ,
[2, 1, -1, 0, 1, -1, 0, -1, 0] ,
[4, 1, -2, -1, 2, -1, 1, -2, 1] ,
[1, -1, -1, 0, 1, 0, 1, 1, 1] ,
[0, 1, -1, -1, 0, 2, 1, 1, 1] ,
[0, -1, 0, 1, 0, 1, 1, 0, 0] ,
[0, -2, 1, 1, 0, 1, 2, 1, 1] ,
[0, 1, 0, 0, 0, 1, -1, 1, 1] ,
[3, -1, 1, 0, -1, -1, 1, -1, 1] ,
[0, -1, 2, 2, -1, 0, 2, 1, 2] ,
[0, 4, -1, 1, -1, 3, -2, 2, 2] ,
[0, 2, -1, -1, -1, 3, 0, 2, 2] ,
[2, 2, -2, 1, 0, 3, -2, 1, -1] ,
[0, -1, -1, -1, 0, 2, 2, 3, 3] ,
[0, 2, 1, 1, 1, 1, -2, 0, 1] ,
[0, 0, 0, 1, -1, 1, 1, 1, 0] ,
[1, 3, -1, 1, -1, 2, -2, 1, 1] ,
[0, 3, -2, -3, -2, 7, 1, 4, 5] ,
[4, -1, 1, -2, 1, 1, -2, -1, 2] ,
[0, 1, 0, -1, -2, 3, 1, 2, 3] ,
[0, 0, -1, 1, 1, 1, 1, 0, 0] ,
[0, 3, 3, 2, -2, -2, -1, 5, 1] ,
[0, 2, 1, 0, 1, 1, -2, 1, 2] ,
[0, 3, 1, 2, 3, 1, 0, -1, -2] ,
[4, -1, 1, 1, 2, -2, -2, -1, 1] ,
[0, 7, 1, 4, 5, 3, -2, -3, -2] ,
[0, 1, 2, 1, 1, -2, 1, 1, 0] ,
[2, -1, 0, 0, 0, 1, 1, -1, -1] ,
[6, 1, 2, -2, -2, -1, -1, -1, -1] ,
[0, 1, 1, 1, 1, -1, 0, 0, 0] ,
[0, 2, 3, 1, 1, -1, -2, 2, 1] ,
[0, -1, -1, 0, 1, 1, 2, 2, 2] ,
[4, 1, 2, -2, -2, -1, 1, -1, 1] ,
[2, -1, -1, -1, 0, 0, 0, 1, 1] ,
[0, 1, 2, 2, 2, -1, -1, 0, 1] ,
[0, -1, -2, 2, 1, 2, 3, 1, 1] ,
[0, 3, 1, 2, 2, 1, -2, -1, 0] ,
[1, -1, 1, 1, -1, 0, 1, 0, 1] ,
[1, 0, 1, 1, 1, -1, -1, 0, 1] ,
[0, 1, 0, 0, 0, 0, 0, 0, 0] ,
[3, 1, -1, 1, 2, -1, -1, -2, 0] ,
[3, -1, 1, -1, 1, 0, -1, -1, 1] ,
[2, -1, 0, -1, 0, 1, -1, 0, 1] ,
[1, 2, -2, 1, 1, 3, -1, 1, -1] ,
[0, 2, 2, -1, -1, 0, 1, 1, 2] ,
[0, -1, 0, 2, 2, 3, 3, -1, -1] ,
[0, 1, 1, -2, 1, 1, 0, 1, 2] ,
[0, 1, -1, 1, 1, 1, 0, 0, 0] ,
[2, 1, 0, 3, -2, 1, -1, 2, -2] ,
[0, 1, 1, -1, -2, 2, 1, 2, 3] ,
[0, -2, -1, 1, 2, 1, 3, 2, 2] ,
[0, 1, 0, 1, 0, 1, -1, 0, 0] ,
[0, 1, 1, 0, 1, 1, 0, -1, 0] ,
[0, 2, 2, 4, -1, 1, -1, 3, -2] ,
[3, 1, 2, -1, -1, -2, 0, 1, -1] ,
[1, 0, 1, 0, 1, 1, 1, -1, -1] ,
[1, 1, 1, 3, -1, 1, -1, 2, -2] ,
[0, 0, 0, 1, 0, 0, 0, 0, 0] ,
[5, 1, -2, 0, 2, -1, -1, -2, -1] ,
[0, 1, -1, 1, 2, 1, 1, -1, 1] ,
[0, 1, 0, 0, -1, 1, 0, 1, 1] ,
[0, 1, 1, 0, 0, 0, -1, 1, 1] ,
[0, 1, 1, 1, 0, 0, 0, 1, -1] ,
[0, 2, 2, 2, -1, -1, -1, 3, 0] ,
[3, -1, 1, 0, 1, -1, -1, -1, 1] ,
[0, 1, 1, -1, 0, 0, 0, 1, 1] ,
[3, 0, -1, -1, 1, -1, 1, -1, 1] ,
[0, 3, 0, 2, 2, 2, -1, -1, -1] ,
[0, 1, 0, 1, -1, 0, 0, 1, 0] ,
[0, 1, 2, 2, 1, 0, 1, 1, -2] ,
[0, 1, 2, 1, 1, -1, 1, 1, -1] ,
[2, 0, 0, 1, 1, -1, -1, -1, 0] ,
[0, 2, 0, 1, -1, 1, -1, 1, 1] ,
[1, 1, 1, -1, -1, 0, 1, 0, 1] ,
[0, -2, -1, 5, 1, 3, 3, 2, -2] ,
[3, -1, 1, -1, 1, -1, 1, 0, -1] ,
[0, 1, 0, 1, 1, 1, 0, 0, -1] ,
[0, 1, 1, -1, 1, 1, -1, 1, 2] ,
[0, 1, 2, -1, 2, 2, -1, 0, 2] ,
[0, 0, 1, 2, 1, 1, 1, 1, -2] ,
[0, 1, 3, 2, 2, -2, -1, 1, 2] ,
[0, -1, -1, 3, 0, 2, 2, 2, -1] ,
[0, 0, 0, 0, 0, 0, 0, 0, 1] ,
[1, 1, -1, -1, -1, 2, 0, 1, 1] ,
[1, 1, 1, 1, -1, -1, -1, 2, 0] ,
[0, 2, 3, 1, 0, -1, -2, 3, 1] ,
[2, -1, 0, 1, -1, 0, 1, -1, 0] ,
[0, 1, 1, 2, 0, 1, -1, 1, -1] ,
[0, 1, 0, -1, 0, 1, 1, 0, 1] ,
[3, -2, 0, 1, -1, 1, 2, -1, -1] ,
[6, -1, -1, 1, 2, -2, -2, -1, -1] ,
[0, 0, 1, 1, -2, 1, 2, 2, 1] ,
[0, 1, 1, 1, 0, 0, -1, 1, 0] ,
[1, 0, 1, -1, 1, 1, -1, 0, 1] ,
[0, 1, 2, 1, 3, 2, 2, -2, -1] ,
[0, 1, 1, 1, 2, 1, 1, -2, 0] ,
[0, 1, 1, 1, -2, 0, 1, 2, 1] ,
[1, 2, 0, 1, 1, 1, -1, -1, -1] ,
[0, -1, 0, 0, 0, 1, 1, 1, 1] ,
[0, 2, 2, 1, -2, -1, 0, 3, 1] ,
[0, 1, 2, 1, 1, -2, 0, 1, 1] ,
[0, 1, 1, 1, -1, -1, 0, 2, 1] ,
[0, 1, 2, -2, 2, 2, -1, 1, 3] ,
[0, 0, 1, 1, 2, 2, 2, -1, -1] ,
[1, 0, 1, 0, 1, -1, 1, 1, -1] ,
[2, 3, -2, 1, -1, 2, -2, 1, 0] ,
[0, 1, 0, 1, 1, 0, 0, -1, 0] ,
[0, 1, 1, -2, 0, 1, 1, 1, 2] ,
[0, 1, 3, 1, 2, -2, 2, 2, -1] ,
[0, 3, 3, -1, -1, -1, 0, 2, 2] ,
[4, -1, 2, -1, 1, -2, 1, 1, -2] ,
[0, 1, 1, 0, -1, 0, 0, 1, 1] ,
[2, 1, 1, -1, -1, -1, 0, 0, 0] ,
[0, -1, 1, 1, -1, 1, 2, 1, 1] ,
[0, 5, 1, 3, 3, 2, -2, -2, -1] ,
[0, 0, 2, 1, 2, -1, 2, 2, -1] ,
[5, -1, -1, -2, -1, 1, -2, 0, 2] ,
[4, 1, -1, 3, -3, 1, -1, 3, -3] ,
[0, 2, 2, -2, -1, 1, 2, 1, 3] ,
[0, 1, 1, 0, 0, -1, 0, 1, 0] ,
[0, 1, 1, 1, 1, 0, -1, 0, 0] ,
[4, 2, -1, 0, 1, 1, -2, -1, -2] ,
[0, -2, 0, 1, 1, 1, 2, 1, 1] ,
[0, 2, -2, -2, -1, 5, 1, 3, 3] ,
[2, 1, -1, 0, -1, 1, -1, 0, 0] ,
[3, 0, 1, -1, -1, -1, 1, -1, 1] ,
[0, 1, -1, 1, 1, 2, 0, 1, -1] ,
[0, 2, 2, 3, 3, -1, -1, -1, 0] ,
[0, 4, 5, 3, -2, -3, -2, 7, 1] ,
[0, 0, 0, 1, 0, 1, 0, 1, -1] ,
[0, 1, -2, -1, 0, 3, 1, 2, 2] ,
[0, 0, 1, 0, 0, 0, 0, 0, 0] ,
[0, 2, 1, 2, 3, 1, 1, -1, -2] ,
[0, -2, 2, 2, -1, 1, 3, 1, 2] ,
[0, 1, 1, 1, 1, 0, 0, 0, -1] ,
[0, 2, 1, 1, 1, 1, -1, -1, 0] ,
[3, -1, 1, -1, 1, 0, 1, -1, -1] ,
[4, -2, 1, 1, -2, -1, 2, -1, 1] ,
[0, 2, -1, 1, 3, 1, 2, -2, 2] ,
[0, 0, 1, 1, 0, -1, 0, 1, 1] ,
[0, 0, 0, 1, 1, 1, 1, -1, 0] ,
[0, 3, -2, 2, 2, 4, -1, 1, -1] ,
[4, -2, -2, -1, 1, -1, 1, 1, 2] ,
[0, 1, -2, 0, 1, 2, 1, 1, 1] ,
[0, -1, 0, 2, 1, 1, 1, 1, -1] ,
[0, 0, 0, 1, 1, 1, 1, 0, -1] ,
[0, -1, -2, 3, 1, 2, 3, 1, 0] ,
[0, -3, -2, 7, 1, 4, 5, 3, -2] ,
[0, -1, 0, 3, 1, 2, 2, 1, -2] ,
[0, 1, 0, 1, 2, 1, 1, -2, 1] ,
[0, -1, 0, 1, 1, 0, 1, 1, 0] ,
[0, 0, -1, 0, 0, 1, 1, 1, 1] ,
[4, -1, 1, -1, 1, 1, 2, -2, -2] ,
[0, 0, 0, 0, 1, 0, 0, 0, 0] ,
[0, 2, -1, 0, 2, 1, 2, -1, 2] ,
[0, 0, 0, -1, 0, 1, 0, 1, 1] ,
[0, 0, 0, 0, -1, 1, 1, 1, 1] ,
[1, 1, -1, 0, 1, 0, 1, -1, 1] ,
[0, 1, -2, 1, 2, 2, 1, 0, 1] ,
[6, -1, -1, -1, -1, 1, 2, -2, -2]]

#Generate the MILP model of Sbox
ineq_fail_index = [];
ineq_fail_count = [0] * len(ineq_list);
lp_string = []
lp_string += ["Minimize"];
ineq_str = "";
for i in range(0, len(ineq_list)):
    ineq_str += "z" + str(i) + " + ";
lp_string += [ineq_str[0:-3]];
lp_string += ["\n"];
lp_string += ["Subject To"];
for i in range(0, len(impossible_diff_arr)):
    imp_diff_arr = np.array([1] + impossible_diff_arr[i]);
    ineq_str_i = "";
    for j in range(0, len(ineq_list)):
        ineq_list_arr = np.array(ineq_list[j]);
        if (sum(imp_diff_arr * ineq_list_arr) < 0):
            ineq_fail_index += [(i, j)];
            ineq_str_i += "z" + str(j) + " + ";
    ineq_str_i = ineq_str_i[0:-3] + " >= 1"
    lp_string += [ineq_str_i];
lp_string += ["\n"];
lp_string += ["Binary"];
for i in range(0, len(ineq_list)):
    lp_string += ["z" + str(i)];
f1 = open("MinimizeInequalities_IVLBC.lp", "w");
for a in lp_string:
    f1.write(a + "\n");
f1.close();

filename_result = "result_IVLBC.txt"
o = gurobipy.read("MinimizeInequalities_IVLBC.lp")
o.optimize()
obj = o.getObjective()
s = 0
fileobj = open(filename_result, "a")
for v in o.getVars():
    s = s + v.x
    if(v.x!=0):
        print('%s %g' % (v.varName, v.x))
    fileobj.write('%s %g' % (v.varName, v.x))
    fileobj.write("\n")
print("s=%d" % (s))
fileobj.close()
#################Following code to be run once inequalities are minimized using MILP#####################
ineq_list_rotated = [];
for inq in ineq_list:
    ineq_list_rotated += [inq[1:]+[inq[0]]]
#print(ineq_list_rotated[0:2])
ineq_redunction = [19,31,33,39,44,59,62,64,66,70,80,84,86,112,124,128,152,161,180,190,197]#result_IVLBC.txt 文件中为1的值
print(len(ineq_redunction))
for i in ineq_redunction:
    print(ineq_list_rotated[i])

